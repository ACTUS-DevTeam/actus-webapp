{"version":3,"sources":["serviceWorker.js","components/Header/index.js","components/Layout/index.js","components/Form/index.js","components/Landing/index.js","components/NotFound/index.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","react_default","a","createElement","className","PureComponent","Layout","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","displayName","name","inherits","createClass","key","value","components_Header_Header","props","children","Component","Form","_PureComponent","state","fields","axios","get","then","res","console","log","data","id","params","toUpperCase","Landing","NotFound","App","components_Layout_Layout","Switch","Route","exact","path","render","Landing_Landing","Form_Form","component","rootElement","document","getElementById","ReactDOM","BrowserRouter","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58640cf6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport './Header.css';\r\n\r\nexport default class Header extends PureComponent { \r\n    render(){\r\n        return (\r\n            <div className=\"header-wrapper\">HEADER HERE</div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from '../Header';\r\nimport './Layout.css';\r\n\r\nexport class Layout extends Component {\r\n  displayName = Layout.name\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Header />\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport class Form extends PureComponent {\r\n  state ={\r\n    fields:[]\r\n  }\r\n  componentDidMount(){\r\n    axios.get('http://localhost:8080/terms')\r\n    .then(res => {\r\n      console.log(res.data);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { match } = this.props;\r\n    let id = match.params.id.toUpperCase();\r\n\r\n    return (\r\n      <div>\r\n        FORM {id}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nexport class Landing extends PureComponent {\r\n  render() {    \r\n    return (\r\n      <div>WELCOME</div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nexport class NotFound extends PureComponent {\r\n  render() {    \r\n    return (\r\n      <div>NOT FOUND</div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { Layout } from './components/Layout';\r\nimport { Form } from './components/Form';\r\nimport { Landing } from './components/Landing';\r\nimport { NotFound } from './components/NotFound';\r\nimport './styles/App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Layout>\r\n          <Switch>\r\n              <Route exact path='/' render={ props => <Landing {...props} />} />\r\n              <Route exact path='/form/:id' render={ props => <Form {...props} />} />\r\n              <Route component={NotFound}/>\r\n          </Switch>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nimport './index.css';\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>, \r\n  rootElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}